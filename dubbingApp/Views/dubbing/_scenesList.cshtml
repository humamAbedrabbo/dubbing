@model IEnumerable<dubbingApp.Models.ViewModels.dubbingSceneViewModel>

@{ 
    string sceneColor;
}
<div class="container-fluid" style="padding:0px">
    @foreach(var work in Model.Select(b => new { b.workIntno, b.workName }).Distinct())
    {
        <input type="hidden" name="isTaken" id="sceneIsTaken"/>
        <div class="row">
            <div class="col-sm-12">
                <small><label class="badge alert-info">@work.workName</label></small>
            </div>
        </div>
        foreach (var episode in Model.Where(b => b.workIntno == work.workIntno).Select(b => new { b.dubbSheetHdrIntno, b.episodeNo }).Distinct())
        {
            <div class="row">
                <div class="col-sm-12">
                    <div class="col-sm-2">
                        <button class="btn btn-primary btn-lg" onclick="onEpisodeClick('@work.workName', @episode.episodeNo, @episode.dubbSheetHdrIntno)" title="Episode">@episode.episodeNo</button>
                    </div>
                    <div class="col-sm-10 btn-group-xs">
                        @foreach (var scene in Model.Where(b => b.workIntno == work.workIntno && b.episodeNo == episode.episodeNo))
                        {
                            string sceneId = scene.dubbSheetDtlIntno.ToString();
                            if (scene.isTaken) { sceneColor = "btn-success"; }
                            else { sceneColor = "btn-default"; }
                            <button class="btn @sceneColor btn-xs" onclick="onSceneClick(5)" id="@sceneId" style="width:30px" title="Scene">@scene.sceneNo</button>
                        }
                    </div>
                </div>
            </div>
            <p></p>
        }
    }
</div>
