@model dubbingModel.client

<div class="container-fluid">
    @using (Ajax.BeginForm("clientAddNew", "contracts",
                                                new AjaxOptions()
                                                {
                                                    HttpMethod = "POST",
                                                    OnSuccess = "onClientAddNewSuccess",
                                                    OnFailure = "onFailure"
                                                },
                                                new { @class = "form-horizontal" }
                                                ))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.clientName, "Name", htmlAttributes: new { @class = "control-label col-sm-4" })
            <div class="col-sm-8">
                @Html.EditorFor(model => model.clientName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.clientName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.clientShortName, "Short Name", htmlAttributes: new { @class = "control-label col-sm-4" })
            <div class="col-sm-8">
                @Html.EditorFor(model => model.clientShortName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.clientShortName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.othClientName, "Other Name", htmlAttributes: new { @class = "control-label col-sm-4" })
            <div class="col-sm-8">
                @Html.EditorFor(model => model.othClientName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.othClientName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.othClientShortName, "Other Short Name", htmlAttributes: new { @class = "control-label col-sm-4" })
            <div class="col-sm-8">
                @Html.EditorFor(model => model.othClientShortName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.othClientShortName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-sm-offset-4 col-sm-8">
                <button type="submit" class="btn btn-default btn-sm">Submit</button>
                &nbsp;
                <a class="btn btn-default btn-sm" onclick="onDismissClick()" role="button">Dismiss</a>
                <label class="alert-success" id="result"></label>
            </div>
        </div>
    }
</div>