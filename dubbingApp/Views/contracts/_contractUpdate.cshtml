@model dubbingModel.agreementWork
@{ 
    string firstShow = Model.firstEpisodeShowDate.HasValue ? Model.firstEpisodeShowDate.Value.ToString("yyyy-MM-dd") : null;
    string status = dubbingApp.Models.LookupModels.decodeDictionaryItem("workStatus", Model.status);
}
<div class="container-fluid" style="padding:0px">
    <div class="panel panel-default">
        <div class="panel-heading">
            <div class="row">
                <div class="col-sm-11">
                    <small><label>@Model.workName</label> &nbsp; <span class="badge">@status</span></small>
                </div>
                <div class="col-sm-1">
                    <button class="btn btn-default btn-xs pull-right" onclick="onCloseClick()" title="Close">
                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                    </button>
                </div>
            </div>
        </div>
        <div class="panel-body">
            @using (Ajax.BeginForm("contractUpdate", "contracts",
                                                new AjaxOptions()
                                                {
                                                    HttpMethod = "POST",
                                                    UpdateTargetId = "formResult",
                                                    OnSuccess = "onWorkSuccess"
                                                },
                                                new { @class = "form-horizontal" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.workIntno)
                @Html.HiddenFor(model => model.agreementIntno)

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.workType, "Type", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.DropDownListFor(model => model.workType, new SelectList(ViewBag.workTypesList, "key", "value"), string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.workType, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.agreementIntno, "Agreement", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.DropDownListFor(model => model.agreementIntno, ViewBag.agreementsList as SelectList, string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.agreementIntno, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.workName, "Name", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.EditorFor(model => model.workName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.workName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.othWorkName, "Other Name", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.EditorFor(model => model.othWorkName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.othWorkName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.workNationality, "Nationality", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.DropDownListFor(model => model.workNationality, new SelectList(ViewBag.workNationalitiesList, "key", "value"), string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.workNationality, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.workOriginalLanguage, "Original Language", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.DropDownListFor(model => model.workOriginalLanguage, new SelectList(ViewBag.originalLanguagesList, "key", "value"), string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.workOriginalLanguage, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.totalNbrEpisodes, "Total Episodes", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.EditorFor(model => model.totalNbrEpisodes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.totalNbrEpisodes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.totalWeekNbrEpisodes, "Weekly Episodes", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.EditorFor(model => model.totalWeekNbrEpisodes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.totalWeekNbrEpisodes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.firstEpisodeShowDate, "First Show", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        <input type="date" name="firstEpisodeShowDate" class="form-control" value="@firstShow" />
                        @Html.ValidationMessageFor(model => model.firstEpisodeShowDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group-sm">
                    <small>@Html.LabelFor(model => model.contactIntno, "contacts", htmlAttributes: new { @class = "control-label" })</small>
                    <div>
                        @Html.DropDownListFor(model => model.contactIntno, ViewBag.contactsList as SelectList, string.Empty, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.contactIntno, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group-sm">
                    <div class="btn-group" style="padding-top:10px;">
                        <button type="submit" class="btn btn-primary btn-xs">Update</button>
                        <button type="button" class="btn btn-danger btn-xs" onclick="onContractChangeStatusClick(@Model.workIntno, '04')">Cancel</button>&nbsp;
                        <button type="button" class="btn btn-success btn-xs" onclick="onContractChangeStatusClick(@Model.workIntno, '03')">Endorse</button>&nbsp;
                        <button type="button" class="btn btn-info btn-xs" onclick="onContractChangeStatusClick(@Model.workIntno, '02')">Suspend</button>
                        <button type="button" class="btn btn-default btn-xs" onclick="onContractChangeStatusClick(@Model.workIntno, '01')">Activate</button>
                    </div>
                    <p>
                        <small><label class="alert-success" id="formResult"></label></small>
                    </p>
                </div>
            }
        </div>
    </div>
</div>