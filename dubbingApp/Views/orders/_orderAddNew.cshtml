@model dubbingModel.workOrder

<div class="container-fluid">
    @using (Ajax.BeginForm("orderAddNew", "orders",
                                                new AjaxOptions()
                                                {
                                                    HttpMethod = "POST",
                                                    UpdateTargetId = "result"
                                                },
                                                new { @class = "form-horizontal" }
                                                ))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            <small>@Html.LabelFor(model => model.clientIntno, "Client", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                @Html.DropDownListFor(model => model.clientIntno, ViewBag.clientsList as SelectList, "Select Client ...", htmlAttributes: new { @class = "form-control", onchange = "onClientComboChanged()", @id = "clientCombo" })
                @Html.ValidationMessageFor(model => model.clientIntno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <small>@Html.LabelFor(model => model.workIntno, "Work", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                @Html.DropDownListFor(model => model.workIntno, ViewBag.worksList as SelectList, "Select Work ...", htmlAttributes : new { @class = "form-control", id = "workCombo" })
                @Html.ValidationMessageFor(model => model.workIntno, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            <small>@Html.LabelFor(model => model.fromEpisode, "From Episode", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                @Html.EditorFor(model => model.fromEpisode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fromEpisode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <small>@Html.LabelFor(model => model.thruEpisode, "Thru Episode", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                @Html.EditorFor(model => model.thruEpisode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.thruEpisode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <small>@Html.LabelFor(model => model.receivedDate, "Received Date", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                <input type="date" name="receivedDate" class="form-control" />
                @Html.ValidationMessageFor(model => model.receivedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <small>@Html.LabelFor(model => model.remarks, "Remarks", htmlAttributes: new { @class = "control-label col-sm-4" })</small>
            <div class="col-sm-8">
                @Html.EditorFor(model => model.remarks, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.remarks, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-sm-offset-4 col-sm-8">
                <button type="submit" class="btn btn-default btn-sm">Submit</button>
                &nbsp;
                <a class="btn btn-default btn-sm" onclick="onDismissClick()" role="button">Dismiss</a>
                <label class="alert-success" id="result"></label>
            </div>
        </div>
    }
</div>