@model dubbingModel.dubbingAppointment
@{ 
    string fromTime = Model.fromTime.HasValue ? Model.fromTime.Value.ToString("HH:mm") : null;
    string thruTime = Model.thruTime.HasValue ? Model.thruTime.Value.ToString("HH:mm") : null;
    string actualFromTime = Model.actualFromTime.HasValue ? Model.actualFromTime.Value.ToString("HH:mm") : null;
    string actualThruTime = Model.actualThruTime.HasValue ? Model.actualThruTime.Value.ToString("HH:mm") : null;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="row">
            <div class="col-sm-10"><label><small>Update Appointment &amp; Attendance Information</small></label></div>
            <div class="col-sm-2">
                <button class="btn btn-default btn-xs pull-right" onclick="onCloseClick()" title="Close">
                    <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                </button>
            </div>
        </div>
    </div>
    <div class="panel-body">
        @using (Ajax.BeginForm("appointmentUpdate", "calendar",
                                            new AjaxOptions()
                                            {
                                                HttpMethod = "POST",
                                                OnSuccess = "onAppointmentUpdateSuccess",
                                                OnFailure = "onAppointmentUpdateFailure"
                                            }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.dubbAppointIntno)
            @Html.HiddenFor(model => model.voiceActorIntno)
            @Html.HiddenFor(model => model.workIntno)

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.studioIntno, "Studio", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-10">
                    <small>
                        @Html.DropDownListFor(model => model.studioIntno, ViewBag.studiosList as SelectList, htmlAttributes: new { @class = "form-control" })
                    </small>
                </div>
                <span>
                    <button type="button" class="btn btn-info btn-xs" data-toggle="modal" data-target="#calendarPopup" title="Studio Calendar">
                        <span class="glyphicon glyphicon-th" aria-hidden="true"></span>
                    </button>
                </span>
                <div class="col-sm-12">
                    <small>
                        @Html.ValidationMessageFor(model => model.studioIntno, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.appointmentDate, "Dubbing Date", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-12">
                    <small>
                        <input type="date" name="appointmentDate" class="form-control" value='@Model.appointmentDate.ToString("yyyy-MM-dd")' />
                        @Html.ValidationMessageFor(model => model.appointmentDate, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.fromTime, "Start Time", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-12">
                    <small>
                        <input type="time" name="fromTime" class="form-control" value="@fromTime"/>
                        @Html.ValidationMessageFor(model => model.fromTime, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.thruTime, "End Time", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-12">
                    <small>
                        <input type="time" name="thruTime" class="form-control" value="@thruTime" />
                        @Html.ValidationMessageFor(model => model.thruTime, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.actualFromTime, "Actual Arrival", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-12">
                    <small>
                        <input type="time" name="actualFromTime" class="form-control" value="@actualFromTime"/>
                        @Html.ValidationMessageFor(model => model.actualFromTime, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group-sm">
                <small>@Html.LabelFor(model => model.actualThruTime, "Departure", htmlAttributes: new { @class = "control-label col-sm-12" })</small>
                <div class="col-sm-12">
                    <small>
                        <input type="time" name="actualThruTime" class="form-control" value="@actualThruTime"/>
                        @Html.ValidationMessageFor(model => model.actualThruTime, "", new { @class = "text-danger" })
                    </small>
                </div>
            </div>

            <div class="form-group">
                <div class="col-sm-12">
                    <button type="submit" class="btn btn-default btn-xs">Update</button>
                    <small><label class="alert-success" id="result"></label></small>
                </div>
            </div>
        }
    </div>
</div>
<div class="modal fade" id="calendarPopup" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div class="modal-title">Studio Calendar</div>
            </div>
            <div class="modal-body">
                @Html.Action("studioCalendarPopup", "calendar", new { std = Model.studioIntno })
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default btn-xs" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>